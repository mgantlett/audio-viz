var c=Object.defineProperty;var d=(t,r,e)=>r in t?c(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var i=(t,r,e)=>d(t,typeof r!="symbol"?r+"":r,e);class g{constructor(r){i(this,"context");i(this,"samples");i(this,"loadingPromises");if(!r)throw new Error("SampleManager requires audioContext");this.context=r,this.samples=new Map,this.loadingPromises=new Map}async loadSample(r,e,o={}){try{if(!r||!e)throw new Error("Sample name and URL are required");if(this.loadingPromises.has(r))return this.loadingPromises.get(r)||!1;console.log(`Loading sample ${r} from ${e}`);const l=(async()=>{try{const a=await fetch(e);if(!a.ok)throw new Error(`Failed to fetch ${e}: ${a.statusText}`);const n=await a.arrayBuffer();if(!n)throw new Error("Failed to get array buffer from response");console.log(`Decoding audio data for ${r}...`);const s=await this.context.decodeAudioData(n);if(!s)throw new Error("Failed to decode audio data");return console.log(`Successfully decoded audio data for ${r}`),this.samples.set(r,{buffer:s,name:r,baseNote:o.baseNote||"C4",loopStart:o.loopStart||0,loopEnd:o.loopEnd||s.length,length:s.length,data:this.getAudioData(s)}),console.log(`Sample ${r} loaded successfully`),!0}catch(a){return console.error(`Error loading sample ${r}:`,a),!1}finally{this.loadingPromises.delete(r)}})();return this.loadingPromises.set(r,l),l}catch(l){return console.error(`Error initiating sample load for ${r}:`,l),!1}}getSample(r){try{if(!r)throw new Error("Sample name is required");return this.samples.get(r)||null}catch(e){return console.error("Error getting sample:",e),null}}listSamples(){try{return Array.from(this.samples.values()).map(r=>({name:r.name,baseNote:r.baseNote,length:r.length,loopStart:r.loopStart,loopEnd:r.loopEnd}))}catch(r){return console.error("Error listing samples:",r),[]}}getAudioData(r){try{const e=r.getChannelData(0);return Float32Array.from(e)}catch(e){return console.error("Error getting audio data:",e),new Float32Array(0)}}hasSample(r){try{return this.samples.has(r)}catch(e){return console.error("Error checking sample existence:",e),!1}}async loadSamples(r){try{return(await Promise.all(r.map(o=>this.loadSample(o.name,o.url,o.options)))).every(o=>o===!0)}catch(e){return console.error("Error loading multiple samples:",e),!1}}removeSample(r){try{if(!r)throw new Error("Sample name is required");return this.samples.delete(r)}catch(e){return console.error("Error removing sample:",e),!1}}clear(){try{return this.samples.clear(),this.loadingPromises.clear(),!0}catch(r){return console.error("Error clearing samples:",r),!1}}isLoading(r){try{return this.loadingPromises.has(r)}catch(e){return console.error("Error checking loading state:",e),!1}}getLoadingProgress(){try{return{total:this.samples.size+this.loadingPromises.size,loaded:this.samples.size,loading:this.loadingPromises.size}}catch(r){return console.error("Error getting loading progress:",r),{total:0,loaded:0,loading:0}}}}export{g as SampleManager};
