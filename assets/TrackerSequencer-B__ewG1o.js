var a=Object.defineProperty;var h=(i,e,t)=>e in i?a(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var s=(i,e,t)=>h(i,typeof e!="symbol"?e+"":e,t);class d{constructor(e,t){s(this,"context");s(this,"sampleManager");s(this,"destination");s(this,"patterns");s(this,"sequence");s(this,"currentPattern");s(this,"currentRow");s(this,"nextNoteTime");s(this,"isPlaying");s(this,"bpm");s(this,"scheduleAheadTime");s(this,"timerID");s(this,"lookahead");if(!e||!t)throw new Error("TrackerSequencer requires audioContext and sampleManager");this.context=e,this.sampleManager=t,this.destination=null,this.patterns=new Map,this.sequence=[0],this.currentPattern=0,this.currentRow=0,this.nextNoteTime=0,this.isPlaying=!1,this.bpm=125,this.scheduleAheadTime=.1,this.timerID=null,this.lookahead=25,this.scheduler=this.scheduler.bind(this),this.nextNote=this.nextNote.bind(this),this.playNote=this.playNote.bind(this),this.scheduleNote=this.scheduleNote.bind(this)}setAudioDestination(e){try{if(!e)throw new Error("Invalid audio destination");return this.destination=e,!0}catch(t){return console.error("Error setting audio destination:",t),!1}}addPattern(e,t){try{if(typeof e!="number"||e<0)throw new Error("Invalid pattern index");if(!t||!t.data)throw new Error("Invalid pattern data");return this.patterns.set(e,t),console.log(`Pattern ${e} added successfully`),!0}catch(r){return console.error("Error adding pattern:",r),!1}}setSequence(e){try{if(!Array.isArray(e)||e.length===0)throw new Error("Invalid sequence");for(const t of e)if(!this.patterns.has(t))throw new Error(`Pattern ${t} not found`);return this.sequence=e,this.currentPattern=0,console.log("Sequence set successfully:",e),!0}catch(t){return console.error("Error setting sequence:",t),!1}}setBPM(e){try{if(typeof e!="number"||e<60||e>200)throw new Error("Invalid BPM value");return this.bpm=e,!0}catch(t){return console.error("Error setting BPM:",t),!1}}start(){try{if(this.isPlaying)return;if(!this.destination)throw new Error("Audio destination not set");if(this.patterns.size===0)throw new Error("No patterns loaded");this.isPlaying=!0,this.currentRow=0,this.nextNoteTime=this.context.currentTime,this.scheduler(),console.log("Sequencer started")}catch(e){console.error("Error starting sequencer:",e),this.stop()}}stop(){try{this.isPlaying=!1,this.currentRow=0,this.timerID!==null&&(clearTimeout(this.timerID),this.timerID=null),console.log("Sequencer stopped")}catch(e){console.error("Error stopping sequencer:",e)}}nextNote(){try{const e=60/this.bpm;this.nextNoteTime+=.25*e;const t=this.patterns.get(this.sequence[this.currentPattern]);if(!t)return;this.currentRow++,this.currentRow>=t.rows&&(this.currentRow=0,this.currentPattern=(this.currentPattern+1)%this.sequence.length)}catch(e){console.error("Error in nextNote:",e),this.stop()}}scheduleNote(e,t){try{const r=this.patterns.get(this.sequence[this.currentPattern]);if(!r)return;for(let n=0;n<r.channels;n++){const o=r.getNote(e,n);o&&o.note&&o.sample!==null&&this.playNote(o,t)}}catch(r){console.error("Error scheduling note:",r)}}playNote(e,t){try{const r=this.sampleManager.getSample(e.sample);if(!r||!r.buffer)return;const n=this.context.createBufferSource();n.buffer=r.buffer;const o=this.context.createGain();if(o.gain.value=e.volume?e.volume/64:1,n.connect(o),this.destination&&o.connect(this.destination),e.note&&r.baseNote){const c=this.getNoteDistance(r.baseNote,e.note);n.playbackRate.value=Math.pow(2,c/12)}n.start(t)}catch(r){console.error("Error playing note:",r)}}getNoteDistance(e,t){try{const r=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],n=o=>{const c=o.slice(0,-1);return parseInt(o.slice(-1))*12+r.indexOf(c)};return n(t)-n(e)}catch(r){return console.error("Error calculating note distance:",r),0}}scheduler(){try{for(;this.nextNoteTime<this.context.currentTime+this.scheduleAheadTime;)this.scheduleNote(this.currentRow,this.nextNoteTime),this.nextNote();this.timerID=window.setTimeout(this.scheduler,this.lookahead)}catch(e){console.error("Error in scheduler:",e),this.stop()}}getCurrentState(){try{return{isPlaying:this.isPlaying,currentPattern:this.currentPattern,currentRow:this.currentRow,bpm:this.bpm,sequence:this.sequence}}catch(e){return console.error("Error getting sequencer state:",e),{isPlaying:!1,currentPattern:0,currentRow:0,bpm:125,sequence:[0]}}}cleanup(){try{this.stop(),this.patterns.clear(),this.sequence=[0],this.destination=null,console.log("Sequencer cleaned up successfully")}catch(e){console.error("Error cleaning up sequencer:",e)}}}export{d as TrackerSequencer};
